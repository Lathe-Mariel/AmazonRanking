/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.amazonscrape;

import com.cloudant.client.api.ClientBuilder;
import com.cloudant.client.api.CloudantClient;
import com.cloudant.client.api.Database;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.Timer;
import java.util.TimerTask;
import javax.mail.Address;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.ImageIcon;
import org.apache.commons.net.ntp.NTPUDPClient;
import org.apache.commons.net.ntp.TimeInfo;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author n11ak
 */
public class InterScrape extends javax.swing.JFrame {

    /**
     * Creates new form InterScrape
     */
    public InterScrape() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane = new javax.swing.JTabbedPane();
        mainPanel = new javax.swing.JPanel();
        upperRankLabel = new javax.swing.JLabel();
        manualButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        logScrollPane = new javax.swing.JScrollPane();
        magazineCoverLabel = new javax.swing.JLabel();
        lowerRankButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        lowerRankLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        upperRankLabel1 = new javax.swing.JLabel();
        upperRankButton = new javax.swing.JButton();
        bookPreferencePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        allDataButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        settingPanel = new javax.swing.JPanel();
        setElementsTextField = new javax.swing.JTextField();
        setElementsLabel = new javax.swing.JLabel();
        setTitlesTextField = new javax.swing.JTextField();
        setTitleLabel = new javax.swing.JLabel();
        scrapePropertySetLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        IBM_ep = new javax.swing.JTextField();
        IBM_iam = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        timerPanel = new javax.swing.JPanel();
        intervalTimeSlider = new javax.swing.JSlider();
        intervalLabel = new javax.swing.JLabel();
        intervalTimeLabel = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        timerAutoLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        addressTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        messageTextField = new javax.swing.JTextField();
        upperToolBar = new javax.swing.JToolBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jTabbedPane.setName(""); // NOI18N
        jTabbedPane.setPreferredSize(new java.awt.Dimension(490, 242));

        mainPanel.setPreferredSize(new java.awt.Dimension(455, 208));

        upperRankLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 36)); // NOI18N
        upperRankLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        upperRankLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        manualButton.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N
        manualButton.setText("順位取得");
        manualButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        manualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualButtonActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N
        titleLabel.setText("インターフェースAmazon順位");

        jLabel7.setFont(new java.awt.Font("MS UI Gothic", 0, 18)); // NOI18N
        jLabel7.setText("コンピュータ・モバイル");
        jLabel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        magazineCoverLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N
        magazineCoverLabel.setForeground(new java.awt.Color(255, 0, 51));
        magazineCoverLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        magazineCoverLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        magazineCoverLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        magazineCoverLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        logScrollPane.setViewportView(magazineCoverLabel);

        lowerRankButton.setFont(new java.awt.Font("MS UI Gothic", 0, 18)); // NOI18N
        lowerRankButton.setText("後");
        lowerRankButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerRankButtonActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("MS UI Gothic", 0, 18)); // NOI18N
        jLabel13.setText("雑誌");
        jLabel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lowerRankLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 36)); // NOI18N
        lowerRankLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lowerRankLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel8.setFont(new java.awt.Font("MS UI Gothic", 0, 18)); // NOI18N
        jLabel8.setText("OS・プログラミング");
        jLabel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        upperRankLabel1.setFont(new java.awt.Font("MS UI Gothic", 0, 36)); // NOI18N
        upperRankLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        upperRankLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        upperRankButton.setFont(new java.awt.Font("MS UI Gothic", 0, 18)); // NOI18N
        upperRankButton.setText("前");
        upperRankButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperRankButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(titleLabel)
                .addGap(162, 162, 162))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(logScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(upperRankLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(upperRankLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel8))))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(upperRankButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(manualButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lowerRankButton))
                                    .addComponent(lowerRankLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(17, Short.MAX_VALUE))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(12, 12, 12)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(upperRankLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(upperRankLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lowerRankLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(upperRankButton)
                            .addComponent(manualButton)
                            .addComponent(lowerRankButton)))
                    .addComponent(logScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("メイン", mainPanel);

        bookPreferencePanel.setPreferredSize(new java.awt.Dimension(455, 214));

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        allDataButton.setText("getAllData()");
        allDataButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        allDataButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        allDataButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        allDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allDataButtonActionPerformed(evt);
            }
        });

        jButton1.setText("sendMail");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setMargin(new java.awt.Insets(2, 30, 2, 14));
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("send IBM");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bookPreferencePanelLayout = new javax.swing.GroupLayout(bookPreferencePanel);
        bookPreferencePanel.setLayout(bookPreferencePanelLayout);
        bookPreferencePanelLayout.setHorizontalGroup(
            bookPreferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookPreferencePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(allDataButton)
                .addGap(43, 43, 43)
                .addComponent(jButton1)
                .addGap(37, 37, 37)
                .addComponent(jButton2)
                .addContainerGap(312, Short.MAX_VALUE))
            .addGroup(bookPreferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bookPreferencePanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        bookPreferencePanelLayout.setVerticalGroup(
            bookPreferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookPreferencePanelLayout.createSequentialGroup()
                .addContainerGap(246, Short.MAX_VALUE)
                .addGroup(bookPreferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(allDataButton))
                .addContainerGap())
            .addGroup(bookPreferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookPreferencePanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane.addTab("Log", bookPreferencePanel);

        settingPanel.setPreferredSize(new java.awt.Dimension(455, 208));

        setElementsTextField.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        setElementsTextField.setText("zg-badge-text");

        setElementsLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        setElementsLabel.setText("順位[elements]");

        setTitlesTextField.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        setTitlesTextField.setText("p13n-sc-truncate");

        setTitleLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        setTitleLabel.setText("雑誌名[titles]");

        scrapePropertySetLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        scrapePropertySetLabel.setText("設定");
        scrapePropertySetLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        IBM_iam.setText("IAM");

        jButton3.setText("設定");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingPanelLayout = new javax.swing.GroupLayout(settingPanel);
        settingPanel.setLayout(settingPanelLayout);
        settingPanelLayout.setHorizontalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3)
                    .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(scrapePropertySetLabel)
                        .addGroup(settingPanelLayout.createSequentialGroup()
                            .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(setElementsLabel)
                                .addComponent(setTitleLabel))
                            .addGap(40, 40, 40)
                            .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(setTitlesTextField)
                                .addComponent(setElementsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(IBM_ep, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(IBM_iam, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(157, Short.MAX_VALUE))
        );
        settingPanelLayout.setVerticalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setElementsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setElementsLabel))
                .addGap(18, 18, 18)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setTitlesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setTitleLabel))
                .addGap(18, 18, 18)
                .addComponent(scrapePropertySetLabel)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(IBM_ep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(IBM_iam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("設定", settingPanel);

        intervalTimeSlider.setMinimum(1);
        intervalTimeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                intervalTimeSliderStateChanged(evt);
            }
        });

        intervalLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        intervalLabel.setText("インターバル");
        intervalLabel.setToolTipText("順位を送信する間隔");

        intervalTimeLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        intervalTimeLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jRadioButton1.setText("ON");
        jRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton1ItemStateChanged(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("OFF");
        jRadioButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton2ItemStateChanged(evt);
            }
        });

        timerAutoLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        timerAutoLabel.setText("Auto:");
        timerAutoLabel.setToolTipText("インターバルごとに自動で送信します");

        addressLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        addressLabel.setText("ランキング送信先IP Address");

        addressTextField.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N

        javax.swing.GroupLayout timerPanelLayout = new javax.swing.GroupLayout(timerPanel);
        timerPanel.setLayout(timerPanelLayout);
        timerPanelLayout.setHorizontalGroup(
            timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timerPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(intervalLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(intervalTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(intervalTimeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
            .addGroup(timerPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(timerPanelLayout.createSequentialGroup()
                        .addComponent(timerAutoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton1)
                        .addGap(28, 28, 28)
                        .addComponent(jRadioButton2)
                        .addGap(275, 275, 275))
                    .addGroup(timerPanelLayout.createSequentialGroup()
                        .addComponent(addressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );
        timerPanelLayout.setVerticalGroup(
            timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timerPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(intervalTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(intervalTimeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(intervalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timerAutoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(18, 18, 18)
                .addGroup(timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(103, 103, 103))
        );

        jTabbedPane.addTab("タイマー", timerPanel);

        jTable1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Mail Address(@cqpub.co.jp)"
            }
        ));
        jTable1.setGridColor(new java.awt.Color(204, 204, 255));
        jTable1.setRowHeight(30);
        jTable1.setShowGrid(true);
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(226, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        jTabbedPane.addTab("Mail", jPanel1);

        messageTextField.setEditable(false);
        messageTextField.setFocusable(false);

        upperToolBar.setRollover(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(messageTextField)
                    .addComponent(upperToolBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 77, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(upperToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void manualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualButtonActionPerformed
        // TODO add your handling code here:
        calcRank();
    }//GEN-LAST:event_manualButtonActionPerformed

    private void intervalTimeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_intervalTimeSliderStateChanged
        // TODO add your handling code here:
        intervalTimeLabel.setText(intervalTimeSlider.getValue() + "m");
    }//GEN-LAST:event_intervalTimeSliderStateChanged

    private void jRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton1ItemStateChanged
        // TODO add your handling code here:
        autoLoadOn();
    }//GEN-LAST:event_jRadioButton1ItemStateChanged

    private void allDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allDataButtonActionPerformed
        // TODO add your handling code here:
        getAllData();
    }//GEN-LAST:event_allDataButtonActionPerformed

    private void jRadioButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton2ItemStateChanged
        // TODO add your handling code here:
        autoLoadOff();
    }//GEN-LAST:event_jRadioButton2ItemStateChanged

    private void upperRankButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperRankButtonActionPerformed
        // TODO add your handling code here:
        if (currentPos > 0) {
            setMagazineImage(--currentPos);
        }
    }//GEN-LAST:event_upperRankButtonActionPerformed

    private void lowerRankButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerRankButtonActionPerformed
        // TODO add your handling code here:
        if (currentPos < 49) {
            setMagazineImage(++currentPos);
        }
    }//GEN-LAST:event_lowerRankButtonActionPerformed
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        send("test", "test");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        putIBM();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
This method is used for setting end point and IAM of IBM cloud(clouadant).
    */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        IBM_EP = IBM_ep.getText();
        IBM_IAM = IBM_iam.getText();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterScrape.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterScrape.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterScrape.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterScrape.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //getData();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterScrape().setVisible(true);
            }
        });
    }

    private int currentPos = 0;
    private Elements imgElements = null;
    private static String url = null;
    /**
     * sourceUrls: 0:雑誌全体1ページ目，　1:雑誌全体2ページ目，　2:コンピュータ・モバイルカテゴリ
     */

    static String[] sourceUrls = {"https://www.amazon.co.jp/gp/bestsellers/books/13384021/ref=zg_bs_nav_b_1_b", "https://www.amazon.co.jp/-/en/gp/bestsellers/books/13384021/ref=zg_bs_pg_2?ie=UTF8&pg=2", "https://www.amazon.co.jp/gp/bestsellers/books/46423011/ref=https://www.amazon.co.jp/gp/bestsellers/books/46456011/ref=zg_bs_nav_b_3_46423011", "https://www.amazon.co.jp/gp/bestsellers/books/46456011/ref=zg_bs_nav_b_3_46423011"};
    private String previousUrl;

    boolean isFirstPage = true;

    int scrapePage() {

        int number = -1;
        if (url == null) {
            url = sourceUrls[0];
        }

        final String USER_AGENT = "ESP32";
        Document doc=null;
        try {
            doc = Jsoup.connect(url)
                    .userAgent(USER_AGENT)
                    .get();
            //System.out.println("Doc: " + doc.title());

            //Element element = doc.body();
            Elements elements = doc.getElementsByClass("zg-badge-text");
            Elements titles = doc.getElementsByClass("p13n-sc-truncate");// p13n-sc-line-clamp-1 p13n-sc-truncate-desktop-type2
            imgElements = doc.select(".aok-inline-block img");
//            System.out.println(doc.getElementsByClass("dg-badge-text"));
//            System.out.println(element.getAllElements());
            int i = 0;
            for (Element element : elements) {
                String title = null;
                if (i < titles.size()) {
                    title = titles.get(i).text();
                    if (title.contains("インターフェース")) {
                        if (number == -1) {
                            number = i + 1;
                        }
                        System.out.print("####");
                    }
                }
                String tx = element.text();
                System.out.print(tx);
                logTextArea.append(tx);

                if (i < titles.size()) {
                    tx = titles.get(i++).text();
                    System.out.println(":    " + tx);
                    logTextArea.append(tx + "\n");
                }
            }

        } catch (UnknownHostException ue){
            messageTextField.setText("UnknownHostException");
            //doc.remove();
            ue.printStackTrace();
            ioFail = true;
            return 0;
        } catch (IOException e) {
            messageTextField.setText("IOException");
            e.printStackTrace();
        }        

        setMagazineImage(number - 1);
        messageTextField.setText("");
        currentPos = number - 1;

        if (number == -1) {
            if (isFirstPage) {
                isFirstPage = false;
                url = sourceUrls[1];
                number = scrapePage();
                if (number > -1) {
                    number += 50;
                }
                isFirstPage = true;
            }
        }

        return number;
    }

    private void setMagazineImage(int n) {
        if (n < 0 || n > 49) {
            n = 0;
        }
        String st = imgElements.get(n).toString();
        System.out.println(st);
        int startPoint = st.indexOf("src=");
        int endPoint = st.indexOf("height=");
        String imgsrc = st.substring(startPoint + 5, endPoint - 2);
        System.out.println("img src = " + imgsrc);

        URL sourceUrl = null;
        try {
            sourceUrl = new URL(imgsrc);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        ImageIcon icon = new ImageIcon(sourceUrl);
        magazineCoverLabel.setIcon(icon);
        magazineCoverLabel.setText(n + 1 + "位");
    }

    /**
     * for test
     */
    public void getAllData() {
        if (url == null) {
            url = sourceUrls[0];
        }

        final String USER_AGENT = "ESP32";
        try {
            Document doc = Jsoup.connect(url)
                    .userAgent(USER_AGENT)
                    .get();

            Elements elements = doc.select(".aok-inline-block img");
            for (Element element : elements) {
                System.out.println(element.toString());
            }
            Element ele = elements.get(3);
            String st = ele.toString();
            int startPoint = st.indexOf("src=");
            int endPoint = st.indexOf("height=");
            String source = st.substring(startPoint + 4, endPoint - 1);
            System.out.println("img src = " + source);
            //System.out.println("Doc: " + doc.title());

            //Element element = doc.body();
            //  System.out.println(doc.getElementsByClass("dg-badge-text"));
            //System.out.println(doc.html());
        } catch (Exception e) {

        }
    }

    Timer timer;
    TimerTask timerTask;

    public void autoLoadOn() {
        System.out.println("Timer On");
        int interval = intervalTimeSlider.getValue();
        messageTextField.setText("自動更新をONにしました: " + interval + "m");
        timerTask = new TimerTask() {
            public void run() {
                calcRank();
            }
        };
        timer = new Timer();
        timer.schedule(timerTask, 60000, interval * 1000 * 60);
    }

    public void autoLoadOff() {
        System.out.println("Timer Off");
        if (timerTask != null) {
            timerTask.cancel();
        }
        timer = null;
    }

    String getTimeStamp() {
        NTPUDPClient client = new NTPUDPClient();
        Date date = null;
        SimpleDateFormat sdt = null;
        try {
            InetAddress address = InetAddress.getByName("ntp.nict.jp");
            client.open();
            TimeInfo ti = client.getTime(address);
            date = new Date(ti.getReturnTime());
            TimeZone tz = TimeZone.getTimeZone("Asia/Tokyo");
            sdt = new SimpleDateFormat();
            sdt.setTimeZone(tz);
            ti.computeDetails();
            long offset = ti.getOffset();
            client.close();
            System.out.println("Offset:" + offset);
        } catch (Exception e) {
            e.printStackTrace();
            return "00:00:00";
        }
        return sdt.format(date);
    }

    void calcRank() {
        messageTextField.setText("ランキング取得中．．．");
        messageTextField.paintImmediately(messageTextField.getVisibleRect());
        url = sourceUrls[0];
        int currentRank = scrapePage();
        if (currentRank == -1) {
            lowerRankLabel.setText("ランク外です");
        } else {
            lowerRankLabel.setText(currentRank + "位");
        }
        url = sourceUrls[3];
        currentRank = scrapePage();
        if (currentRank == -1) {
            upperRankLabel1.setText("ランク外です");
        } else {
            upperRankLabel1.setText(currentRank + "位");
        }
        url = sourceUrls[2];
        currentRank = scrapePage();
        if (currentRank == -1) {
            upperRankLabel.setText("ランク外です");
        } else {
            upperRankLabel.setText(currentRank + "位");
        }
        messageTextField.setText("更新日時： " + getTimeStamp() + " JST");
        if(!ioFail){
            putIBM();
        }
        ioFail = false;
    }

    public void putIBM() {
        if(IBM_IAM == null || IBM_EP ==null)return;
        
        CloudantClient client = null;
        try {
            client = ClientBuilder.url(new URL(IBM_EP))
                    .iamApiKey(IBM_IAM)
                    .build();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
// Show the server version
        System.out.println("Server Version: " + client.serverVersion());

// Get a List of all the databases this Cloudant account
        List<String> databases = client.getAllDbs();
        System.out.println("All my databases : ");
        for (String db : databases) {
            System.out.println(db);
        }
        
// Get a Database instance to interact with, but don't create it if it doesn't already exist
        Database db = client.database("noderedjmqpg20210624", false);

// A Java type that can be serialized to JSON
// Create an ExampleDocument and save it in the database
        String timeStamp = "";
        timeStamp = getTimeStamp();
        int rank;
        try {
            String tmpText = lowerRankLabel.getText();
            tmpText = tmpText.substring(0, tmpText.length()-1);
            rank = Integer.parseInt(tmpText);
        } catch (NumberFormatException e) {
            if(!lowerRankLabel.getText().equals("ランク外です")){
                e.printStackTrace();
            }
            rank = 0;
        }
        CurrentData cd = new CurrentData(timeStamp, rank);
        db.save(cd);
        System.out.println("You have inserted the document: " + cd);
    }

    class CurrentData {

        private String _id = "timeStamp";
        private int rank = 0;
        // private boolean isExample;

        public CurrentData(String timeStamp, int currentRank) {
            this._id = timeStamp;
            this.rank = currentRank;
        }

        public String toString() {
            return "{ TimeStamp: " + _id + "Rank " + rank + "\n}";
        }
    }

    public void send(String subject, String content) {

        final String to = "nagai@cqpub.co.jp";
        final String from = "interface.sugamo@gmail.com";

        // Google account mail address
        final String username = "interface.sugamo@gmail.com";
        // Google App password
        final String password = "";

        final String charset = "ISO-2022-JP";
        //final String charset = "UTF-8";

        final String encoding = "base64";

        // for gmail
        String host = "smtp.gmail.com";
        String port = "465";
        String starttls = "true";

        // for local
        //String host = "localhost";
        //String port = "2525";
        //String starttls = "false";
        Properties props = new Properties();
        props.put("mail.smtp.user", username);
        props.put("mail.smtp.password", password);

        props.put("mail.smtp.host", host);
        props.put("mail.smtp.port", port);
        props.put("mail.transport.protocol", "smtp");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.ssl.enable", "true");
        props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        props.put("mail.smtp.socketFactory.fallback", "true");
        props.put("mail.smtp.socketFactory.port", "465");
        props.put("mail.smtp.starttls.enable", starttls);
        props.put("mail.smtp.starttls.required", "true");

        props.put("mail.smtp.connectiontimeout", "10000");
        props.put("mail.smtp.timeout", "10000");

        props.put("mail.debug", "true");

        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

        try {
            MimeMessage message = new MimeMessage(session);

            // Set From:
            message.setFrom(new InternetAddress(from, "Amazon Ranking"));
            // Set ReplyTo:
            message.setReplyTo(new Address[]{new InternetAddress(from)});
            // Set To:
            message.setRecipient(Message.RecipientType.TO, new InternetAddress(to));

            message.setSubject(subject, charset);
            message.setText(content, charset);

            message.setHeader("Content-Transfer-Encoding", encoding);

            Transport.send(message);

        } catch (MessagingException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }

    private boolean ioFail = false;
    private String IBM_IAM=null;
    private String IBM_EP=null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IBM_ep;
    private javax.swing.JTextField IBM_iam;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField addressTextField;
    private javax.swing.JButton allDataButton;
    private javax.swing.JPanel bookPreferencePanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel intervalLabel;
    private javax.swing.JLabel intervalTimeLabel;
    private javax.swing.JSlider intervalTimeSlider;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTable1;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton lowerRankButton;
    private javax.swing.JLabel lowerRankLabel;
    private javax.swing.JLabel magazineCoverLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton manualButton;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JLabel scrapePropertySetLabel;
    private javax.swing.JLabel setElementsLabel;
    private javax.swing.JTextField setElementsTextField;
    private javax.swing.JLabel setTitleLabel;
    private javax.swing.JTextField setTitlesTextField;
    private javax.swing.JPanel settingPanel;
    private javax.swing.JLabel timerAutoLabel;
    private javax.swing.JPanel timerPanel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton upperRankButton;
    private javax.swing.JLabel upperRankLabel;
    private javax.swing.JLabel upperRankLabel1;
    private javax.swing.JToolBar upperToolBar;
    // End of variables declaration//GEN-END:variables
}
